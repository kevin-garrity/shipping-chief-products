h1. World Shipping Calculator

h2. Manual Installation

Remember to back up your theme before you start installing this app.


* Check both regular theme and mobile theme
* Add the following to the bottom of assets/checkout.css.liquid if already exists  and add following styles. Otherwise continue to next step.

** Copy the code

#overview #thumbs h3[title^="Shipping"] + span {
  display: none;
}
#overview #thumbs tr td:first-child {
 display: none;
}
#payment {
    display: none;
}

* Wherever you find @{{ cart.item_count }}@ in the layout/theme.liquid file and layout/cart.liquid replace it with: @{% include 'webify-shipping-items-hidden-price' %}@

** This is so that the number of items displayed in the cart will not reflect the secret hidden shipping line items we use internally.

* Add the following to templates/cart.liquid, after the cart form near the bottom of the file. Look for proceed to checkout button and add the following line @{% include 'webify-request-shipping-form' %}@


* Modify cart.liquid
** Add @class="item"@  to each product tr in cart.liquid
** add @{% if item.title == 'Shipping' %}shipping{% endif %}@ to tr class
** add @id="cartform"@ to form in cart.liquid
** add @class="cart-total-price"@ to total price container in cart, look for cart.total_price
** For theme that does not use table for cart, add @class="cart-subtotal"@ to the line that contains subtotal. If total is in a table row, create an empty div with the class cart-subtotal. Check if shipping charge is displayed before subtotal in the shop.
** tag td in the cart table with class name price, quantity, total, item
** look for <input class="text quantity" type="text" size="4" id="updates_{{ item.id }}" name="updates[{{ item.id }}]" value="{{ item.quantity }}" class="replace" />
and make sure name="updates[{{ item.id }}] is present.

Remember: when adding classes or id's to elements that already have a class of id set, leave a space between the different classes and ids. For example, @class='even item shipping'@ is OK, but clearly @class='evenitem shipping'@ will cause some problems.

* Modify the html emails that gets sent to filter out shipping product 
** Order Confirmation email
*** Make changes like this

bc. {% for line in line_items %}
{% if line.title == 'Shipping' %}
  {% assign delivery_charge = line.line_price %}
{% else %} 
  {{ line.quantity }}x {{line.title }} for {{ line.price | money }} each
{% endif %}
{% endfor %}

bc. {% if delivery_charge %}
Shipping charge included in subtotal: {{delivery_charge | money_with_currency }}
{% else %}
{% if requires_shipping %}
Shipping  : {{ shipping_price | money_with_currency }}{% endif %}
{% endif %}

** New order notification and New order notification(mobile)

bc. {% for line in line_items %}
{% if line.title != 'Shipping' %}
{{ line.quantity }}x {{line.title }}		(sku: {{ line.sku }})
{% endif %}
{% endfor %}

** shipping confirmation, shipping update

bc. {% for line in fulfillment.line_items %}
{% if line.title !="Shipping" %}
{{ line.quantity }}x {{ line.title }}
{% endif %}
{% endfor %}

h2. End of manual installation steps.



(TODO Ziggy thinks we should use 'sub-total' instead of 'total')


Move to FAQ

In order to integrate smoothly with your store, World Shipping Calculator imagines that you have adopted certain conventions. This is so that World Shipping Calculator can interact with your store's cart, adding shipping price line items, and manipulating the various inputs.

* The Cart is a table
** The first @tr@ is the table header row
** The elements of the table header row are @th@ elements naming the columns
** In each subsequent table row, there is one table data corresponding to each header
** There are at least the following headers: item, quantity, total, price
* The Cart contains a form, with a submit input
** The @name@ attribute of the input used to proceed to checkout should be 'checkout'
* There is a @shipping@ collection
** The collection has just one product, the @shipping@ product
** The shipping product has price $0.01

