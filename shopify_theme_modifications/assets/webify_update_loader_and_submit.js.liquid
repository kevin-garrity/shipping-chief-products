
// Code to fetch the request form
// TODO this info should live somewhere
var host = "http://localhost:3000/"
var action = "australia_post_api_connections"
var xhr; // global request object for the calculation request

// When we submit the form we should disable the submit button
// but when we change the country select, it should abort the current
// request and resubmit
update_loader_and_submit = function(method, dataHash, callback, fallback) {
  // Got the loader from http://www.ajaxload.info/
  webifyJQ(".actions > input").attr('disabled', 'disabled');
  webifyJQ("#indicator").html("<img src='{{ 'webify-ajax-loader.gif' | asset_url }}' alt='' />").show();

  if (xhr && xhr.readyState != 4) {
    xhr.abort();
  }

  // TODO find out more about making CORS requests, whether and when we need to
  // set support.cors = true, and whether interlieving might occur
  // so we need to wrap the .ajax method with our .CORSajax method, and keep all
  // the nice arguments we had
  webifyJQ.support.cors = true;
  xhr = webifyJQ.ajax({
    url: host + action, // globally defined
    type: method,
    dataType: 'html',
    contentType: 'text/plain',
    data: dataHash,
    crossDomain: true,
    success: function(data, text_status, jqXHR) {
      var query_string = $(this).attr('data')
      callback(data, query_string);
    },
    error: function(request, text_status, error_thrown) {
      if ((typeof fallback) === 'function') {
        fallback(request, text_status, error_thrown);
      } else {
        // TODO big problems here, status is always 0...
        // not sure how to get a CORS request to return non-zero status
        switch(request.state()) {
          case 'rejected':
            log(request.state())
            break;
          default:
            log(request.state())
        };
      }
    }
  }).fail(function() { })
  .always(function() { })
  .complete(function() {
    webifyJQ(".actions > input").removeAttr('disabled');
    webifyJQ("#indicator").empty().hide();
  });
}

// cred to http://www.joezimjs.com/javascript/3-ways-to-parse-a-query-string-in-a-url/
parseQueryString = function( queryString ) {
  var params = {}, queries, temp, i, l;

  // Split into key/value pairs
  queries = queryString.split("&");

  // Convert the array of strings into an object
  for ( i = 0, l = queries.length; i < l; i++ ) {
    temp = queries[i].split('=');
    params[decodeURI(temp[0])] = decodeURI(temp[1]);
  }

  return params;
};
