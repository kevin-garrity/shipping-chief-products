require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AustraliaPostApiConnectionsController do

  # This should return the minimal set of attributes required to create a valid
  # AustraliaPostApiConnection. As you add validations to AustraliaPostApiConnection, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "domestic" => "false" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AustraliaPostApiConnectionsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context 'handling GET new' do

    let!(:existing_shop) { FactoryGirl.create :preference_for_shop }

    it "should render the australia post shipping form" do
      @request.env['HTTP_ORIGIN'] = "http://www.existingshop.com"
      get :new
      controller.should render_template("new")
    end

    it "should find a list of countries" do
      @request.env['HTTP_ORIGIN'] = "http://www.existingshop.com"
      get :new
      assigns(:countries).should_not be_empty
    end

    it "should assign @australia_post_api_connection => a valid connection object" do
      @request.env['HTTP_ORIGIN'] = "http://www.existingshop.com"
      get :new
      expect { assigns(:australia_post_api_connection).save }.to be_true
    end

    it "should raise an UnknownShopError if the url is unrecognized" do
      @request.env['HTTP_ORIGIN'] = "*/*, http://www.myshop.com"
      expect {get :new}.to raise_error(Preference::UnknownShopError)
    end
  end

end
