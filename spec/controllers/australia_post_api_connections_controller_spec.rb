require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AustraliaPostApiConnectionsController do

  def valid_post_params
    {"action"=>"create", "controller"=>"australia_post_api_connections", "authenticity_token"=>"Yt5WCv970HK3NJkCs7ZMlbjV+7VFvjxy9/B5wbFphE4=", "australia_post_api_connection"=>{"weight"=>"2", "to_postcode"=>"", "from_postcode"=>"3222", "country_code"=>"It", "height"=>"7.7", "width"=>"16.0", "length"=>"22.0", "blanks"=>"0", "shop"=>"www.existingshop.com"}}
  end

  describe :new do
    let!(:existing_shop) { FactoryGirl.create :preference_for_shop }

    context "when request origin is a shop" do
      let!(:request_origin) { @request.env['HTTP_ORIGIN'] = "http://www.existingshop.com" }
      before(:each) { get :new }

      it { should render_template("new") }
      specify { expect(assigns(:australia_post_api_connection).save).to be_true }
      specify { assigns(:countries).should_not be_empty }
    end

    context "when request origin is unknown" do
      let!(:request_origin) { @request.env['HTTP_ORIGIN'] = "http://www.example.com" }
      specify { expect(get :new).to raise_error(ActiveRecord::RecordNotFound)}
    end
  end

  shared_examples "a succesful post to create" do
    before(:each) { post :create, post_params }

    it { should render_template("create") }
    specify { expect( assigns(:australia_post_api_connection).save).to be_true }
    specify { assigns(:countries).should_not be_empty }
    specify { assigns(:service_list).should_not be_empty }
  end

  describe :create do
    let!(:existing_shop) { FactoryGirl.create :preference_for_shop }
    let!(:post_params) { post_params = valid_post_params }

    context "when country code is international" do
      let!(:international) { post_params['australia_post_api_connection']['country_code'] = "It" }

      it_behaves_like "a succesful post to create"
      specify { expect(assigns(:australia_post_api_connection).domestic).to be_false }
    end

    context "when country code is domestic" do
      let!(:domestic) do
        post_params['australia_post_api_connection']['country_code'] = "AUS"
        post_params['australia_post_api_connection']['to_postcode'] = "3000"
      end

      it_behaves_like "a succesful post to create"
      specify { expect(assigns(:australia_post_api_connection).domestic).to be_true }
    end

    context "when the postcode for a domestic request is missing" do
      let!(:domestic) do
        post_params['australia_post_api_connection']['country_code'] = "AUS"
      end
      before(:each) { post :create, post_params }

      it { should render_template("_trouble") }
    end

    context "when the shop is not recognized" do
      let!(:not_a_shop) { post_params['australia_post_api_connection']['shop'] = "www.example.com" }

      specify { expect(post :create, post_params).to raise_error(ActiveRecord::RecordNotFound)}
    end

    context "when weight is out of bounds" do
      let!(:bad_weight) { post_params['australia_post_api_connection']['weight'] = 0 }
      before(:each) { post :create, post_params }

      it { should render_template("_trouble") }
    end
  end
end
